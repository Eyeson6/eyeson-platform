<template menuId="7005" version="2"><!--模板跟节点 -->

    <!-- 在页面上显示页面的所在位置 -->
    <directions>
        <direct name="财务管理"/>
        <direct name="购进退出财务审核"/>
    </directions>

    <!-- 将模块所有sql语句统一配置，供各个操作使用，其中包含多个sql配置 -->
    <sqls sql="true">
        <!-- 查询SQL语句 -->
        <sql id="listsql" method="select">
            SELECT
            id,
            code,
            supplier_id,
            supplier_code,
            supplier_name,
            acceptance_id,
            acceptance_code,
            purchase_order_id,
            purchase_order_code,
            return_type,
            (
            SELECT
            NAME
            FROM
            SAAS_TEST.saas_dictionary dd
            WHERE
            dd.`category` = "return_type"
            AND dd.`value` = return_type
            ) AS return_type_name,
            purchaser_id,
            purchaser_name,
            out_time,
            approver_id,
            approver_name,
            out_user_id,
            out_user_name,
            out_reviewer_id,
            out_reviewer_name,
            out_reviewer_time,
            amount,
            create_time,
            update_time,
            status,
            (
            SELECT
            NAME
            FROM
            SAAS_TEST.saas_dictionary dd
            WHERE
            dd.`category` = "approval_status"
            AND dd.`value` = status
            ) AS status_name,
            remark
            FROM
            SAAS_TEST.saas_purchase_order_return
            where 1=1 and status = '0'
            <if method="isNoEmpty" args="${startTime}">
                <![CDATA[and out_time >= ${startTime}]]>
            </if>
            <if method="isNoEmpty" args="${endTime}">
                <![CDATA[ and out_time <= ${endTime}]]>
            </if>
            <if method="isNoEmpty" args="${supplier_name}">
                <![CDATA[ and supplier_name like %${supplier_name}%]]>
            </if>
            <if method="isNoEmpty" args="${supplier_code}">
                <![CDATA[ and supplier_code like %${supplier_code}%]]>
            </if>
            <if method="isNoEmpty" args="${code}">
                <![CDATA[ and code like %${code}%]]>
            </if>
            <if method="isNoEmpty" args="${purchaser_name}">
                <![CDATA[ and purchaser_name like %${purchaser_name}%]]>
            </if>
            <if method="isNoEmpty" args="${approver_name}">
                <![CDATA[ and approver_name like %${approver_name}%]]>
            </if>
            <if method="isNoEmpty" args="${out_user_name}">
                <![CDATA[ and out_user_name like %${out_user_name}%]]>
            </if>
            order by out_time desc
        </sql>

        <sql id="updateSql" method="execute">
            update SAAS_TEST.saas_purchase_order_return set
            <if method="isNoEmpty" args="${rows.out_reviewer_id}">
                out_reviewer_id=${rows.out_reviewer_id},
            </if>
            <if method="isNoEmpty" args="${rows.out_reviewer_name}">
                out_reviewer_name=${rows.out_reviewer_name},
            </if>
            <if method="isNoEmpty" args="${rows.status_name}">
                status=${rows.status_name},
            </if>
            <if method="isNoEmpty" args="${rows.remark}">
                remark=${rows.remark},
            </if>
            out_reviewer_time=now(),
            update_time=now()
            where id=${rows.id}
        </sql>

        <sql id="insertInventorySql" method="execute">
            insert into SAAS_TEST.saas_inventory(
            goods_id,
            goods_code,
            batch_code,
            supplier_id,
            supplier_code,
            quantity,
            order_price,
            remark,
            creater_id,
            creater_name,
            modifier_id,
            modifier_name,
            status,
            inventory_type,
            qualified,
            storage_id,
            create_time,
            update_time
            ) select
            d.goods_id,
            d.goods_code,
            d.batch_code,
            r.supplier_id,
            r.supplier_code,
            d.return_quantity,
            d.purchase_price,
            "",
            ${rows.out_reviewer_id},
            ${rows.out_reviewer_name},
            ${rows.out_reviewer_id},
            ${rows.out_reviewer_name},
            0,
            0,
            0,
            d.storage_id,
            now(),
            now()
            from SAAS_TEST.saas_purchase_order_return_detail d left join SAAS_TEST.saas_purchase_order_return r
            on d.purchase_order_return_id = r.id
            where purchase_order_return_id=${rows.id} and ${rows.status_name} = 1 and ${rows.return_type} = 0

        </sql>

        <sql id="insertInventoryDetailSql" method="execute">
            insert into SAAS_TEST.saas_inventory_detail(
            goods_id,
            goods_code,
            goods_name,
            supplier_id,
            supplier_code,
            goods_generic_name,
            goods_specification,
            manufacturer,
            goods_place,
            preparation_id,
            unit_id,
            registration_code,
            batch_code,
            purchased_price,
            quantity,
            inventory_type,
            status,
            qualified,
            storage_id,
            creater_id,
            creater_name,
            create_time,
            update_time
            ) select
            d.goods_id,
            d.goods_code,
            d.goods_name,
            r.supplier_id,
            r.supplier_code,
            d.goods_generic_name,
            d.goods_specification,
            d.manufacturer,
            d.goods_place,
            d.preparation_id,
            d.unit_id,
            d.registration_code,
            d.batch_code,
            d.purchase_price,
            d.return_quantity,
            0,
            0,
            0,
            d.storage_id,
            ${rows.out_reviewer_id},
            ${rows.out_reviewer_name},
            now(),
            now()
            from SAAS_TEST.saas_purchase_order_return_detail d left join SAAS_TEST.saas_purchase_order_return r
            on d.purchase_order_return_id = r.id
            where purchase_order_return_id=${rows.id} and ${rows.status_name} = 1 and ${rows.return_type} = 0
        </sql>


        <sql id="insertQualifiedInventorySql" method="execute">
            insert into SAAS_TEST.saas_inventory(
            goods_id,
            goods_code,
            batch_code,
            supplier_id,
            supplier_code,
            quantity,
            order_price,
            remark,
            creater_id,
            creater_name,
            modifier_id,
            modifier_name,
            status,
            inventory_type,
            qualified,
            storage_id,
            create_time,
            update_time
            ) select
            d.goods_id,
            d.goods_code,
            d.batch_code,
            r.supplier_id,
            r.supplier_code,
            d.return_quantity,
            d.purchase_price,
            "",
            ${rows.out_reviewer_id},
            ${rows.out_reviewer_name},
            ${rows.out_reviewer_id},
            ${rows.out_reviewer_name},
            0,
            0,
            1,
            d.storage_id,
            now(),
            now()
            from SAAS_TEST.saas_purchase_order_return_detail d left join SAAS_TEST.saas_purchase_order_return r
            on d.purchase_order_return_id = r.id
            where purchase_order_return_id=${rows.id} and ${rows.status_name} = 1 and ${rows.return_type} = 1

        </sql>

        <sql id="insertQualifiedInventoryDetailSql" method="execute">
            insert into SAAS_TEST.saas_inventory_detail(
            goods_id,
            goods_code,
            goods_name,
            supplier_id,
            supplier_code,
            goods_generic_name,
            goods_specification,
            manufacturer,
            goods_place,
            preparation_id,
            unit_id,
            registration_code,
            batch_code,
            purchased_price,
            quantity,
            inventory_type,
            status,
            qualified,
            storage_id,
            creater_id,
            creater_name,
            create_time,
            update_time
            ) select
            d.goods_id,
            d.goods_code,
            d.goods_name,
            r.supplier_id,
            r.supplier_code,
            d.goods_generic_name,
            d.goods_specification,
            d.manufacturer,
            d.goods_place,
            d.preparation_id,
            d.unit_id,
            d.registration_code,
            d.batch_code,
            d.purchase_price,
            d.return_quantity,
            0,
            0,
            1,
            d.storage_id,
            ${rows.out_reviewer_id},
            ${rows.out_reviewer_name},
            now(),
            now()
            from SAAS_TEST.saas_purchase_order_return_detail d left join SAAS_TEST.saas_purchase_order_return r
            on d.purchase_order_return_id = r.id
            where purchase_order_return_id=${rows.id} and ${rows.status_name} = 1 and ${rows.return_type} = 1
        </sql>

        <sql id="insertLockInventorySql" method="execute">
            insert into SAAS_TEST.saas_inventory(
            goods_id,
            goods_code,
            batch_code,
            supplier_id,
            supplier_code,
            quantity,
            order_price,
            remark,
            creater_id,
            creater_name,
            modifier_id,
            modifier_name,
            status,
            inventory_type,
            qualified,
            storage_id,
            create_time,
            update_time
            ) select
            d.goods_id,
            d.goods_code,
            d.batch_code,
            r.supplier_id,
            r.supplier_code,
            -1 * d.return_quantity,
            d.purchase_price,
            "",
            ${rows.out_reviewer_id},
            ${rows.out_reviewer_name},
            ${rows.out_reviewer_id},
            ${rows.out_reviewer_name},
            0,
            3,
            2,
            d.storage_id,
            now(),
            now()
            from SAAS_TEST.saas_purchase_order_return_detail d left join SAAS_TEST.saas_purchase_order_return r
            on d.purchase_order_return_id = r.id
            where purchase_order_return_id=${rows.id} and ${rows.status_name} != 0

        </sql>

        <sql id="insertLockInventoryDetailSql" method="execute">
            insert into SAAS_TEST.saas_inventory_detail(
            goods_id,
            goods_code,
            goods_name,
            supplier_id,
            supplier_code,
            goods_generic_name,
            goods_specification,
            manufacturer,
            goods_place,
            preparation_id,
            unit_id,
            registration_code,
            batch_code,
            purchased_price,
            quantity,
            inventory_type,
            status,
            qualified,
            storage_id,
            creater_id,
            creater_name,
            create_time,
            update_time
            ) select
            d.goods_id,
            d.goods_code,
            d.goods_name,
            r.supplier_id,
            r.supplier_code,
            d.goods_generic_name,
            d.goods_specification,
            d.manufacturer,
            d.goods_place,
            d.preparation_id,
            d.unit_id,
            d.registration_code,
            d.batch_code,
            d.purchase_price,
            -1 * d.return_quantity,
            3,
            0,
            2,
            d.storage_id,
            ${rows.out_reviewer_id},
            ${rows.out_reviewer_name},
            now(),
            now()
            from SAAS_TEST.saas_purchase_order_return_detail d left join SAAS_TEST.saas_purchase_order_return r
            on d.purchase_order_return_id = r.id
            where purchase_order_return_id=${rows.id} and ${rows.status_name} != 0
        </sql>

        <sql id="querySql" method="query">
            SELECT
            id,
            code,
            supplier_id,
            supplier_code,
            supplier_name,
            salesperson_name,
            salesperson_tel,
            acceptance_id,
            acceptance_code,
            purchase_order_id,
            purchase_order_code,
            return_type,
            (
            SELECT
            NAME
            FROM
            SAAS_TEST.saas_dictionary dd
            WHERE
            dd.`category` = "return_type"
            AND dd.`value` = return_type
            ) AS return_type_name,
            purchaser_id,
            purchaser_name,
            out_time,
            approver_id,
            approver_name,
            out_user_id,
            out_user_name,
            out_reviewer_id,
            out_reviewer_name,
            out_reviewer_time,
            amount,
            create_time,
            update_time,
            rejection_reason
            from SAAS_TEST.saas_purchase_order_return where
            id=${key}
        </sql>

        <sql id="listSqlDetail" method="select">
            SELECT
            id,
            purchase_order_return_id,
            purchase_order_return_code,
            goods_id,
            goods_code,
            goods_name,
            goods_generic_name,
            goods_specification,
            goods_place,
            preparation_id,
            unit_id,
            (select name from SAAS_TEST.saas_dictionary d where d.`category`="preparation_id" and d.`value` =
            preparation_id ) as preparation_name,
            (select name from SAAS_TEST.saas_dictionary d where d.`category`="unit_id" and d.`value` = unit_id ) as
            unit_name,
            manufacturer,
            registration_code,
            batch_code,
            production_time,
            expire_time,
            return_quantity,
            storage_quantity,
            purchase_price,
            amount,
            rejection_reason,
            storage_time,
            acceptance_id,
            acceptance_code,
            storage_id AS storage_id,
            (select name from SAAS_TEST.saas_storage ss where ss.`id` = storage_id ) as storage_name,
            create_time,
            update_time
            FROM
            SAAS_TEST.saas_purchase_order_return_detail
            where purchase_order_return_id = ${key}
        </sql>
    </sqls>

    <!-- =========================================页面显示节点=========================================== -->

    <!-- 查询节点，配包括查询请求的执行流程、页面渲染方式、查询条件配置等几个部分 -->
    <query pagesize="50">
        <!-- 执行流程，包含多个步骤，每个步骤可以选择调用service、执行sql，调用http等不同类型的操作 -->
        <process>
            <step channel="sql" ref="listsql"/>
        </process>
        <model>
            <clumn name="status_name" sortable="false" title="意见" editor="true" input="select">
                <sql>
                    select a.value id,a.name text
                    from SAAS_TEST.saas_dictionary a where a.category = 'approval_status' and a.`value` != '0'
                </sql>
            </clumn>
            <clumn name="out_reviewer_time" sortable="false" title="备注" editor="true"/>
            <clumn name="supplier_name" sortable="false" title="供应商名称"/>
            <clumn name="code" sortable="false" title="退货单号"/>
            <clumn name="return_type_name" sortable="false" title="退货类型"/>
            <clumn name="purchaser_name" sortable="false" title="采购员"/>

            <clumn name="out_time" sortable="false" title="购进退出日期"/>
            <clumn name="approver_name" sortable="false" title="审核员"/>
            <clumn name="out_user_name" sortable="false" title="出库员"/>
            <clumn name="amount" sortable="false" title="单据金额"/>

        </model>
        <!-- 查询条件 -->
        <conditions>
            <condition input="text" title="供货单位编码" name="supplier_code"/>
            <condition input="text" title="供货单位名称" name="supplier_name"/>
            <condition input="text" title="单据编号" name="code"/>
            <condition input="date" title="购进退出时间" name="startTime" type="3"/>
            <condition input="date" title="至" name="endTime" type="3"/>
            <condition input="text" title="采购员" name="purchaser_name"/>
            <condition input="text" title="出库员" name="out_user_name"/>
            <condition input="text" title="审核员" name="approver_name"/>

        </conditions>
    </query>

    <buttons>
        <!-- 添加节点，配包括添加操作请求的执行流程、页面渲染方式 -->
        <button id="test1" title="审核" icon="icon-add" channel="fastSave" width="1200">
            <process>
                <step channel="service" ref="saasPurchaseOrderService" method="saveReturnReviewedData"/>
                <!--<step channel="sql" ref="updateSql" />-->
                <step channel="batchSql" ref="updateSql" collection="rows" item="rows"/>
                <step channel="batchSql" ref="insertInventorySql" collection="rows" item="rows"/>
                <step channel="batchSql" ref="insertInventoryDetailSql" collection="rows" item="rows"/>
                <step channel="batchSql" ref="insertQualifiedInventorySql" collection="rows" item="rows"/>
                <step channel="batchSql" ref="insertQualifiedInventoryDetailSql" collection="rows" item="rows"/>
                <step channel="batchSql" ref="insertLockInventorySql" collection="rows" item="rows"/>
                <step channel="batchSql" ref="insertLockInventoryDetailSql" collection="rows" item="rows"/>
            </process>
            <queryProcess>
                <step channel="service" ref="commonSearchService2" method="test"/>
            </queryProcess>
            <key>id</key>
            <table>saas_purchase_order_return</table>
            <conditions>
                <condition input="text" title="供货单位编码" name="supplier_code"/>
                <condition input="text" title="供货单位名称" name="supplier_name"/>
            </conditions>
        </button>
    </buttons>

    <operate>
        <button id="test1" title="查看退货单" icon="icon-add" channel="query_select" width="1200">
            <queryProcess>
                <step channel="sql" ref="querySql"/>
                <step channel="service" ref="commonSearchService2" method="test"/>
            </queryProcess>
            <key>id</key>
            <table>saas_purchase_order_return</table>
            <conditions>
                <condition name="return_type" input="select" readonly="true" size="20" title="退货类型">
                    <sql>
                        select a.value id,a.name text
                        from SAAS_TEST.saas_dictionary a where a.category = 'return_type'
                    </sql>
                </condition>

                <condition name="rejection_reason" input="select" readonly="true" size="20" title="退货原因">
                    <sql>
                        select a.value id,a.name text
                        from SAAS_TEST.saas_dictionary a where a.category = 'rejection_reason'
                    </sql>
                </condition>
                <condition name="supplier_code" input="text" size="50" readonly="true" title="供方编码"/>
                <condition name="supplier_name" input="text" size="50" readonly="true" title="供应商名称"/>
                <condition name="out_time" input="date" title="购进退出时间" readonly="true"/>
                <condition name="amount" input="text" size="20" readonly="true" title="购进退出金额"/>
                <condition name="purchaser_name" input="text" size="20" readonly="true" title="采购员"/>
                <condition name="approver_name" input="text" size="20" readonly="true" title="审核员"/>
                <condition name="out_user_name" input="text" size="20" readonly="true" title="出库员"/>
                <condition name="salesperson_name" input="text" size="20" readonly="true" title="厂家销售人员名称"/>
                <condition name="salesperson_tel" input="text" size="20" readonly="true" title="联系电话"/>
            </conditions>

            <querys>
                <query id="test8" key="id" channel="" pagesize="50" popupselect="7110" popuptitle="退货商品选择" width="800"
                       isPage="false" passvalue="supplier_id,return_type">
                    <!-- 执行流程，包含多个步骤，每个步骤可以选择调用service、执行sql，调用http等不同类型的操作 -->
                    <process>
                        <step channel="service" ref="commonSearchService2" method="test"/>
                        <step channel="sql" ref="listSqlDetail"/>
                        <step channel="service" ref="commonSearchService2" method="test"/>
                    </process>
                    <model>
                        <clumn name="acceptance_id" hidden="true" sortable="false" title="采购入库验收ID"/>
                        <clumn name="acceptance_code" hidden="true" sortable="false" title="采购入库验收编码"/>
                        <clumn name="goods_id" hidden="true" sortable="false" title="商品ID"/>
                        <clumn name="goods_code" sortable="false" title="商品编码"/>
                        <clumn name="goods_name" sortable="false" title="商品名称"/>
                        <clumn name="goods_generic_name" hidden="true" sortable="false" title="商品通用名称"/>
                        <clumn name="goods_specification" sortable="false" title="商品规格"/>
                        <clumn name="batch_code" sortable="false" title="批号"/>
                        <clumn name="storage_name" sortable="false" title="货位"/>
                        <clumn name="expire_time" sortable="false" title="有效期至"/>
                        <clumn name="production_time" sortable="false" title="生产日期"/>
                        <clumn name="storage_quantity" sortable="false" title="可退数量"/>
                        <clumn name="return_quantity" sortable="false" title="退货数量"/>
                        <clumn name="purchase_price" sortable="false" title="单价"/>
                        <clumn name="amount" sortable="false" title="金额"/>
                        <!--<clumn name="preparation_id" sortable="false" title="剂型" editor="true" required="true" readonly="true" editortype="combobox">
                            <sql>
                                    select a.value id,a.name text
                                    from SAAS_TEST.saas_dictionary a where a.category = 'preparation_id'
                            </sql>
                        </clumn>
                        <clumn name="unit_id" sortable="false" title="单位" editor="true" required="true" readonly="true" editortype="combobox">
                            <sql>
                                    select a.value id,a.name text
                                    from SAAS_TEST.saas_dictionary a where a.category = 'unit_id'
                            </sql>
                        </clumn>-->
                        <clumn name="preparation_id" hidden="true" sortable="false" title="剂型"/>
                        <clumn name="preparation_name" sortable="false" title="剂型"/>
                        <clumn name="unit_id" hidden="true" sortable="false" title="单位"/>
                        <clumn name="unit_name" sortable="false" title="单位"/>
                        <clumn name="manufacturer" sortable="false" title="生产企业"/>
                        <clumn name="goods_place" sortable="false" title="商品产地"/>
                        <clumn name="registration_code" sortable="false" title="批准文号"/>
                        <clumn name="storage_time" sortable="false" title="入库日期"/>
                        <clumn name="remark" sortable="false" title="备注"/>
                    </model>
                </query>
            </querys>
        </button>
    </operate>
</template>


